<template>
	<div>
		<div class="content-header">
			<h1>
				{{ trans(`$PLURAL_LOWERCASE_CLASS_NAME$.${pageTitle}`) }}
			</h1>
			<el-breadcrumb separator="/">
				<el-breadcrumb-item>
					<a href="/backend">{{ trans('core.breadcrumb.home') }}</a>
				</el-breadcrumb-item>
				<el-breadcrumb-item :to="{name: 'admin.$LOWERCASE_MODULE_NAME$.$LOWERCASE_CLASS_NAME$.index'}">{{ trans('$PLURAL_LOWERCASE_CLASS_NAME$.title.$PLURAL_LOWERCASE_CLASS_NAME$') }}
				</el-breadcrumb-item>
				<el-breadcrumb-item :to="{name: 'admin.$LOWERCASE_MODULE_NAME$.$LOWERCASE_CLASS_NAME$.create'}">{{ trans(`$PLURAL_LOWERCASE_CLASS_NAME$.${pageTitle}`) }}
				</el-breadcrumb-item>
			</el-breadcrumb>
		</div>
		<el-form ref="form"
		         :model="role"
		         label-width="120px"
		         label-position="top"
		         v-loading.body="loading"
		         @keydown="form.errors.clear($event.target.name);">
			<div class="row">
				<div class="col-md-12">
					<div class="box box-primary">
						<div class="box-body">

						</div>
						<div class="box-footer">
							<el-form-item>
								<el-button type="primary" @click="onSubmit()" :loading="loading">
									{{ trans('core.save') }}
								</el-button>
								<el-button @click="onCancel()">{{ trans('core.button.cancel') }}
								</el-button>
							</el-form-item>
						</div>
					</div>
				</div>
			</div>
		</el-form>
		<button v-shortkey="['b']" @shortkey="pushRoute({name: 'admin.$LOWERCASE_MODULE_NAME$.$LOWERCASE_CLASS_NAME$.index'})" v-show="false"></button>
	</div>
</template>

<script>
    import axios from 'axios';
    import Form from 'form-backend-validation';
    import ShortcutHelper from '../../../../../Modules/Core/Assets/js/mixins/ShortcutHelper';

    export default {
        mixins: [ShortcutHelper],
        components: {
        },
        props: {
            locales: {default: null},
            pageTitle: {default: null, String},
        },
        data() {
            return {
                $LOWERCASE_CLASS_NAME$: {

                },
                form: new Form(),
                loading: false,
            };
        },
        methods: {
            onSubmit() {
                this.form = new Form(this.role);
                this.loading = true;

                this.form.post(this.getRoute())
                    .then((response) => {
                        this.loading = false;
                        this.$message({
                            type: 'success',
                            message: response.message,
                        });
                        this.$router.push({name: 'admin.$LOWERCASE_MODULE_NAME$.$LOWERCASE_CLASS_NAME$.index'});
                    })
                    .catch((error) => {
                        console.log(error);
                        this.loading = false;
                        this.$notify.error({
                            title: 'Error',
                            message: 'There are some errors in the form.',
                        });
                    });
            },
            onCancel() {
                this.$router.push({name: 'admin.$LOWERCASE_MODULE_NAME$.$LOWERCASE_CLASS_NAME$.index'});
            },
            fetch$CLASS_NAME$() {
                this.loading = true;
                let routeUri = '';
                if (this.$route.params.$LOWERCASE_CLASS_NAME$Id !== undefined) {
                    routeUri = route('api.$LOWERCASE_MODULE_NAME$.$LOWERCASE_CLASS_NAME$.find', {role: this.$route.params.$LOWERCASE_CLASS_NAME$Id});
                } else {
                    routeUri = route('api.$LOWERCASE_MODULE_NAME$.$LOWERCASE_CLASS_NAME$.find-new');
                }
                axios.post(routeUri)
                    .then((response) => {
                        this.loading = false;
                        this.$LOWERCASE_CLASS_NAME$ = response.data.data;
                    });
            },
            getRoute() {
                if (this.$route.params.roleId !== undefined) {
                    return route('api.$LOWERCASE_MODULE_NAME$.$LOWERCASE_CLASS_NAME$.update', {role: this.$route.params.$LOWERCASE_CLASS_NAME$Id});
                }
                return route('api.$LOWERCASE_MODULE_NAME$.$LOWERCASE_CLASS_NAME$.store');
            },
        },
        mounted() {
            this.fetch$CLASS_NAME$();
        },
    };
</script>
